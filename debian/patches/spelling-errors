Description: Spelling corrections to be forwarded to upstream
 This patch contains some spelling errors that were detected by lintian
 and that will be forwarded to upstream for the next release.
Author: Gennaro Oliva <oliva.g@na.icar.cnr.it>
Forwarded: yes by private mail
Last-Update: <2011-05-06>

--- slurm-llnl-2.2.4.orig/contribs/perlapi/libslurm/perl/lib/Slurm.pm
+++ slurm-llnl-2.2.4/contribs/perlapi/libslurm/perl/lib/Slurm.pm
@@ -108,7 +108,7 @@ Then call the desired functions:
 
     $resp = $slurm->load_jobs();
 
-In the following L</"METHODS"> section, if a paramter may be omitted, it will be listed as "param=val" , where "val" is the default value of the paramter if it is not given.
+In the following L</"METHODS"> section, if a parameter may be omitted, it will be listed as "param=val" , where "val" is the default value of the parameter if it is not given.
     
 =head2 DATA STRUCTURES
     
@@ -181,7 +181,7 @@ Get the string describing the specified
 
 =over 2
 
-=item * IN $errno: error number. If ommitted or 0, the error number returned by C<$slurm->get_errno()> will be used.
+=item * IN $errno: error number. If omitted or 0, the error number returned by C<$slurm->get_errno()> will be used.
     
 =item * RET: error string.
 
--- slurm-llnl-2.2.4.orig/src/slurmctld/power_save.c
+++ slurm-llnl-2.2.4/src/slurmctld/power_save.c
@@ -442,7 +442,7 @@ static void _clear_power_config(void)
 	FREE_NULL_BITMAP(exc_node_bitmap);
 }
 
-/* Initialize power_save module paramters.
+/* Initialize power_save module parameters.
  * Return 0 on valid configuration to run power saving,
  * otherwise log the problem and return -1 */
 static int _init_power_config(void)
--- slurm-llnl-2.2.4.orig/testsuite/expect/test12.2
+++ slurm-llnl-2.2.4/testsuite/expect/test12.2
@@ -42,7 +42,7 @@ set job_id      0
 set matches     0
 set aix         0
 
-# job paramters
+# job parameters
 set mem_size    1024000
 set sleep_time  21
 set ret_code    42
--- slurm-llnl-2.2.4.orig/testsuite/expect/test8.5
+++ slurm-llnl-2.2.4/testsuite/expect/test8.5
@@ -40,7 +40,7 @@ set file_err    "test$test_id.error"
 set job_id      0
 set matches     0
 
-# job paramters
+# job parameters
 set sleep_time 1
 
 proc run_and_test { size } {
--- slurm-llnl-2.2.4.orig/testsuite/expect/test8.8
+++ slurm-llnl-2.2.4/testsuite/expect/test8.8
@@ -38,7 +38,7 @@ set exit_code   0
 set job_id      0
 set matches     0
 
-# job paramters
+# job parameters
 set sleep_time  5
 
 
--- slurm-llnl-2.2.4.orig/testsuite/expect/test8.6
+++ slurm-llnl-2.2.4/testsuite/expect/test8.6
@@ -39,7 +39,7 @@ set file_in     "test$test_id.input"
 set job_id      0
 set matches     0
 
-# job paramters
+# job parameters
 set sleep_time  5
 
 # make a bunch of blocks of the specified size (node_cnt)
--- slurm-llnl-2.2.5.orig/NEWS
+++ slurm-llnl-2.2.5/NEWS
@@ -2960,7 +2960,7 @@ documents those changes that are of inte
     than one partition uses a node or there is more than one socket per node.
  -- In output for "scontrol show job" change "StartTime" header to "EligibleTime"
     for pending jobs to accurately describe what is reported.
- -- Add more slurmdbd.conf paramters: ArchiveScript, ArchiveAge, JobPurge, and
+ -- Add more slurmdbd.conf parameters: ArchiveScript, ArchiveAge, JobPurge, and
     StepPurge (not fully implemented yet).
  -- Add slurm.conf parameter EnforcePartLimits to reject jobs which exceed a
     partition's size and/or time limits rather than leaving them queued for a
@@ -3263,7 +3263,7 @@ documents those changes that are of inte
     removed!  That functionality is now available in the separate commands
     salloc, sbatch, and sattach, respectively.
  -- Add new node state FAILING plus trigger for when node enters that state.
- -- Add new configuration paramter "PrivateData". This can be used to 
+ -- Add new configuration parameter "PrivateData". This can be used to 
     prevent a user from seeing jobs or job steps belonging to other users.
  -- Added configuration parameters for node power save mode: ResumeProgram
     ResumeRate, SuspendExcNodes, SuspendExcParts, SuspendProgram and 
@@ -4176,7 +4176,7 @@ documents those changes that are of inte
  - BLUEGENE - check to make sure set_block_user works when the block
    is in a ready state.
  - Fix to slurmstepd to not use local variables in a pthread create.
- - In sched/wiki2 - add wiki.conf paramter HostFormat specifying 
+ - In sched/wiki2 - add wiki.conf parameter HostFormat specifying 
    format of hostlists exchanged between Slurm and Moab (experimental).
  - mpi/mvapich: Support Adam Moody's fast MPI initialization protocol 
    (MVAPICH protocol version 8).
--- slurm-llnl-2.2.5.orig/contribs/perlapi/libslurm/perl/step_ctx.c
+++ slurm-llnl-2.2.5/contribs/perlapi/libslurm/perl/step_ctx.c
@@ -434,7 +434,7 @@ task_start_cb(launch_tasks_response_msg_
 
 	hv = newHV();
 	if (launch_tasks_response_msg_to_hv(resp_msg, hv) < 0) {
-		Perl_warn( aTHX_ "failed to prepare paramter for task_start callback");
+		Perl_warn( aTHX_ "failed to prepare parameter for task_start callback");
 		SvREFCNT_dec(hv);
 		return;
 	}
@@ -468,7 +468,7 @@ task_finish_cb(task_exit_msg_t *exit_msg
 
 	hv = newHV();
 	if (task_exit_msg_to_hv(exit_msg, hv) < 0) {
-		Perl_warn( aTHX_ "failed to prepare paramter for task_exit callback");
+		Perl_warn( aTHX_ "failed to prepare parameter for task_exit callback");
 		SvREFCNT_dec(hv);
 		return;
 	}
--- slurm-llnl-2.2.5.orig/doc/man/man5/slurm.conf.5
+++ slurm-llnl-2.2.5/doc/man/man5/slurm.conf.5
@@ -424,7 +424,7 @@ See \fBProlog and Epilog Scripts\fR for
 
 .TP
 \fBEpilogMsgTime\fR
-The number of microseconds the the slurmctld daemon requires to process
+The number of microseconds that the slurmctld daemon requires to process
 an epilog completion message from the slurmd dameons. This parameter can
 be used to prevent a burst of epilog completion messages from being sent
 at the same time which should help prevent lost messages and improve
--- slurm-llnl-2.2.5.orig/src/sacctmgr/archive_functions.c
+++ slurm-llnl-2.2.5/src/sacctmgr/archive_functions.c
@@ -422,7 +422,7 @@ extern int sacctmgr_archive_dump(int arg
 		if (access(arch_cond->archive_dir, W_OK) < 0) {
 			errno = EACCES;
 			fprintf(stderr, " dump: "
-				"archive dir %s is not writeable\n",
+				"archive dir %s is not writable\n",
 				arch_cond->archive_dir);
 			return SLURM_ERROR;
 		}
