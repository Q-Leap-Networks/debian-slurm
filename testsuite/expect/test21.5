#!/usr/bin/expect
############################################################################
# Purpose: Test of SLURM functionality
#          sacctmgr add, list, and delete a cluster
#
# Output:  "TEST: #.#" followed by "SUCCESS" if test was successful, OR
#          "FAILURE: ..." otherwise with an explanation of the failure, OR
#          anything else indicates a failure mode that must be investigated.
############################################################################
# Copyright (C) 2008 Lawrence Livermore National Security.
# Produced at Lawrence Livermore National Laboratory (cf, DISCLAIMER).
# Written by Joseph Donaghy <donaghy1@llnl.gov>
# LLNL-CODE-402394.
# 
# This file is part of SLURM, a resource management program.
# For details, see <http://www.llnl.gov/linux/slurm/>.
#  
# SLURM is free software; you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free
# Software Foundation; either version 2 of the License, or (at your option)
# any later version.
# 
# SLURM is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
# 
# You should have received a copy of the GNU General Public License along
# with SLURM; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301  USA.
############################################################################
source ./globals

set test_id     "21.5"
set exit_code   0
set amatches     0
set lmatches     0
set dmatches     0
set not_support 0
set add		add
set lis		list
set del		delete
set mod		modify
set clu		cluster
set tc1		tCluster1


print_header $test_id

#
# Use sacctmgr to create a cluster
#
set sadd_pid [spawn $sacctmgr $add $clu $tc1]
expect {
	-re "Adding Cluster" {
		incr amatches
		exp_continue
	}
	-re "Name *= $tc1" {
		incr amatches
		exp_continue
	}
	-re "Would you like to commit changes\\\? \\\(You have 30 seconds to decide\\\)" {
		incr amatches
		exp_continue
	}
	-re "\\\(N\\\/y\\\):" {
		incr amatches
		send "Y\r"
		exp_continue
	}
	timeout {
		send_user "\nFAILURE: sacctmgr add not responding\n"
		slow_kill $sadd_pid
		set exit_code 1
	}
	eof {
		wait
	}
}

if {$amatches != 4} {
	send_user "\nFAILURE:  sacctmgr had a problem adding clusters\n"
	set exit_code 1
}

#
# Use sacctmgr to list the addition of cluster
#
set slist_pid [spawn $sacctmgr $lis $clu $tc1]
expect {
	-re "Name" {
		incr lmatches
		exp_continue
	}
	-re "$tc1" {
		incr lmatches
		exp_continue
		send_user "\nFound $tc1 in database\n"
	}
	timeout {
		send_user "\nFAILURE: sacctmgr list not responding\n"
		slow_kill $slist_pid
		set exit_code 1
	}
	eof {
		wait
	}
}

if {$lmatches != 2} {
	send_user "\nFAILURE:  sacctmgr had a problem listing clusters\n"
	set exit_code 1
}

#
# Use sacctmgr to delete the test cluster
#
set sadel_pid [spawn $sacctmgr $del $clu $tc1]
expect {
	-re "Deleting clusters" {
		incr dmatches
		exp_continue
	}
	-re "$tc1" {
		incr dmatches
		exp_continue
	}
	-re "Would you like to commit changes\\\? \\\(You have 30 seconds to decide\\\)" {
		incr dmatches
		exp_continue
	}
	-re "\\\(N\\\/y\\\):" {
		incr dmatches
		send "Y\r"
		exp_continue
	}
	timeout {
		send_user "\nFAILURE: sacctmgr delete not responding\n"
		slow_kill $sadel_pid
		set exit_code 1
	}
	eof {
		wait
	}
}

if {$dmatches != 4} {
	send_user "\nFAILURE: sacctmgr had a problem deleting cluster\n"
	set exit_code 1
}

if {$exit_code == 0} {
	send_user "\nSUCCESS\n"
}

exit $exit_code
