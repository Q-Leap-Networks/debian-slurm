#!/usr/bin/expect
############################################################################
# Purpose: Test of SLURM functionality
#          sacctmgr dump test
#          
#
# Output:  "TEST: #.#" followed by "SUCCESS" if test was successful, OR
#          "FAILURE: ..." otherwise with an explanation of the failure, OR
#          anything else indicates a failure mode that must be investigated.
############################################################################
# Copyright (C) 2008 Lawrence Livermore National Security.
# Produced at Lawrence Livermore National Laboratory (cf, DISCLAIMER).
# Written by Joseph Donaghy <donaghy1@llnl.gov>
# CODE-OCEC-09-009. All rights reserved.
# 
# This file is part of SLURM, a resource management program.
# For details, see <https://computing.llnl.gov/linux/slurm/>.
# Please also read the included file: DISCLAIMER.
#  
# SLURM is free software; you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free
# Software Foundation; either version 2 of the License, or (at your option)
# any later version.
# 
# SLURM is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
# 
# You should have received a copy of the GNU General Public License along
# with SLURM; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301  USA.
############################################################################
source ./globals_accounting

set test_id     "test21.24"
set file_in     "$test_id.input"
set file_in2    "$test_id.input2"
set file_in3    "$test_id.input3"
set file_out    "$test_id.output"
set file_out2   "$test_id.output2"
set file_out3   "$test_id.output3"
set file_out4   "$test_id.output4"
set exit_code   0
set lis		list
set as		assoc
set fmt		format
set cln		clean
set tre		tree
set was		withassoc
set wco		withcoordinator
set par		Parent
set roo		root
set clu		Cluster
set cl1		clust1
set cl2		clust2
set cl3		clust3
set tc1		clust1
set tc2		clust2
set tc3		clust3
set acc		Account
set nams	names
set nm1		scienceacct
set nm2		physicsacct
set nm3		theoryacct
set nm4		appliedacct
set dsc		Description
set ds1		scienceacct
set ds2		physicsacct
set ds3		theoryacct
set ds4		appliedacct
set org		Organization
set or1		scienceorg
set or2		physicsorg
set or3		theoryorg
set or4		appliedorg
set usr		User
set us1		u1ser
set us2		u2ser
set us3		u3ser
set us4		u4ser
set qs		QOS
set qs1		tnormal
set qs2		runfirst
set qs3		runlast
set pat		parent
set al		AdminLevel
set aln		None
set ala		Administrator
set alo		Operator
set coo         Coordinator
set col         CoordinatorList
set dac		DefaultAccount
set pts		Partitions
set pde		pdebug
set pba		pbatch
set dw		DefaultWCKey
set wk		WCKeys
set wk1		latch
set wk2		stone
set wk3		hole
set wk4		turn
set fs		Fairshare
set gm		GrpCPUMins
set gc		GrpCPUs
set gj		GrpJobs
set gs		GrpSubmitJobs
set gn		GrpNodes
set gw		GrpWall
set mm		MaxCPUMins
set mp		MaxCPUMinsPerJob
set mc		MaxCPUs
set mu		MaxCPUsPerJob
set mj		MaxJobs
set ms		MaxSubmitJobs
set mn		MaxNodes
set mnj		MaxNodesPerJob
set mw		MaxWall
set md		MaxWallDurationPerJob
set fs1		1000
set fs2		2375
set fs3		3240
set fs4		4321
set fs5		5678
set fs6		6789
set gm1		1100
set gc1		10
set gj1		120
set gs1		130
set gn1		140
set gw1		60
set gt1		01:00:00
set mc1		150
set mm1		110000
set mj1		160
set ms1		170
set mn1		180
set mw1		70
set mt1		01:10:00
set gm2		2000
set gc2		20
set gj2		210
set gs2		220
set gn2		230
set gw2		120
set gt2		02:00:00
set mc2		240
set mm2		220000
set mj2		250
set ms2		260
set mn2		270
set mw2		140
set mt2		02:20:00
set gm3		3300
set gc3		30
set gj3		310
set gs3		320
set gn3		330
set gw3		180
set gt3		03:00:00
set mc3		340
set mm3		330000
set mj3		350
set ms3		360
set mn3		370
set mw3		210
set mt3		03:30:00
set gm4		4000
set gc4		40
set gj4		410
set gs4		420
set gn4		430
set gw4		240
set gt4		04:00:00
set mc4		440
set mm4		420000
set mj4		450
set ms4		460
set mn4		470
set mw4		280
set mt4		04:40:00
set gm5		5500
set gc5		50
set gj5		510
set gs5		520
set gn5		530
set gw5		300
set gt5		05:00:00
set mc5		540
set mm5		550000
set mj5		550
set ms5		560
set mn5		570
set mw5		350
set mt5		05:50:00
set gm6		6600
set gc6		60
set gj6		610
set gs6		620
set gn6		630
set gw6		1440
set gt6		1-00:00:00
set mc6		640
set mm6		660000
set mj6		650
set ms6		660
set mn6		670
set mw6		2880
set mt6		2-00:00:00
set timeout     60
set access_err  0

print_header $test_id

set timeout 60

#
# Check accounting config and bail if not found.
#
if { [test_account_storage] == 0 } {
	send_user "\nWARNING: This test can't be run without a usable AccountStorageType\n"
	exit 0
}
set track_wckey [test_track_wckey]

if { [string compare [check_accounting_admin_level] "Administrator"] } {
	send_user "\nWARNING: This test can't be run without being an Accounting administrator.\nUse sacctmgr mod user \$USER_NAME admin=admin.\n"
	exit 0
}

#make sure we have a clean system and permission to do this work
remove_user "" "" "$us1,$us2,$us3,$us4"
remove_acct "" "$nm1,$nm2,$nm3,$nm4"
remove_qos "$qs1,$qs2,$qs3"
remove_cluster "$tc1,$tc2,$tc3"
if {$access_err != 0} {
	send_user "\nWARNING: not authorized to perform this test\n"
	exit $exit_code
}

#add qos
incr exit_code [add_qos "$qs2"]
if { $exit_code } {
	remove_user "" "" "$us1,$us2,$us3,$us4"
	remove_acct "" "$nm1,$nm2,$nm3,$nm4"
	remove_qos "$qs1,$qs2,$qs3"
	remove_cluster "$tc1,$tc2,$tc3"
	exit $exit_code
}

#add cluster
#name QOS Fairshare GrpCPUs GrpJobs GrpNodes GrpSubmitJobs MaxCPUMins MaxCPUs MaxJobs MaxNodes MaxSubmitJobs MaxWallDurationPerJob
incr exit_code [add_cluster "$tc3" "$qs2" "$fs6" "$gc6" "$gj6" "$gn6" "$gs6" "$mm6" "$mc6" "$mj6" "$mn6" "$ms6" "$mw6"]
if { $exit_code } {
	remove_user "" "" "$us1,$us2,$us3,$us4"
	remove_acct "" "$nm1,$nm2,$nm3,$nm4"
	remove_qos "$qs1,$qs2,$qs3"
	remove_cluster "$tc1,$tc2,$tc3"
	exit $exit_code
}

#add accounts
#cluster parent name description organization qos Fairshare GrpCPUMins GrpCPUs GrpJobs GrpNodes GrpSubmitJobs GrpWall MaxCPUMins MaxCPUs MaxJobs MaxNodes MaxSubmitJobs MaxWallDurationPerJob
incr exit_code [add_acct "$cl3" "$roo" "$nm4" "$ds4" "$or4" "$qs2" "$fs5" "$gm5" "$gc5" "$gj5" "$gn5" "$gs5" "$gw5" "$mm5" "$mc5" "$mj5" "$mn5" "$ms5" "$mw5"]
if { $exit_code } {
	remove_user "" "" "$us1,$us2,$us3,$us4"
	remove_acct "" "$nm1,$nm2,$nm3,$nm4"
	remove_qos "$qs1,$qs2,$qs3"
	remove_cluster "$tc1,$tc2,$tc3"
	exit $exit_code
}

incr exit_code [add_acct "$cl3" "$nm4" "$nm3" "$ds3" "$or3" "$qs2" "$fs4" "$gm4" "$gc4" "$gj4" "$gn4" "$gs4" "$gw4" "$mm4" "$mc4" "$mj4" "$mn4" "$ms4" "$mw4"]
if { $exit_code } {
	remove_user "" "" "$us1,$us2,$us3,$us4"
	remove_acct "" "$nm1,$nm2,$nm3,$nm4"
	remove_qos "$qs1,$qs2,$qs3"
	remove_cluster "$tc1,$tc2,$tc3"
	exit $exit_code
}

incr exit_code [add_acct "$cl3" "$nm3" "$nm2" "$ds2" "$or2" "$qs2" "$fs3" "$gm3" "$gc3" "$gj3" "$gn3" "$gs3" "$gw3" "$mm3" "$mc3" "$mj3" "$mn3" "$ms3" "$mw3"]
if { $exit_code } {
	remove_user "" "" "$us1,$us2,$us3,$us4"
	remove_acct "" "$nm1,$nm2,$nm3,$nm4"
	remove_qos "$qs1,$qs2,$qs3"
	remove_cluster "$tc1,$tc2,$tc3"
	exit $exit_code
}

#add users
# cluster account name part adminlevel defaultaccount defaultwckey wckeys qoslevel Fairshare GrpCPUMins GrpCPUs GrpJobs GrpNodes GrpSubmitJobs GrpWall MaxCPUMins MaxCPUs MaxJobs MaxNodes MaxSubmitJobs MaxWallDurationPerJob 
incr exit_code [add_user "$tc3" "$nm4" "$us3" "" "$ala" "$nm3" "$wk3" "$wk1,$wk2,$wk4" "$qs2" "$fs3" "$gm3" "$gc3" "$gj3" "$gn3" "$gs3" "$gw3" "$mm3" "$mc3" "$mj3" "$mn3" "$ms3" "$mw3" ]
if { $exit_code } {
	remove_user "" "" "$us1,$us2,$us3,$us4"
	remove_acct "" "$nm1,$nm2,$nm3,$nm4"
	remove_qos "$qs1,$qs2,$qs3"
	remove_cluster "$tc1,$tc2,$tc3"
	exit $exit_code
}

incr exit_code [add_user "$tc3" "$nm3" "$us2" "" "$alo" "$nm2" "$wk2" "$wk1,$wk3,$wk4" "$qs2" "$fs2" "$gm2" "$gc2" "$gj2" "$gn2" "$gs2" "$gw2" "$mm2" "$mc2" "$mj2" "$mn2" "$ms2" "$mw2" ]
if { $exit_code } {
	remove_user "" "" "$us1,$us2,$us3,$us4"
	remove_acct "" "$nm1,$nm2,$nm3,$nm4"
	remove_qos "$qs1,$qs2,$qs3"
	remove_cluster "$tc1,$tc2,$tc3"
	exit $exit_code
}

incr exit_code [add_user "$tc3" "$nm2" "$us1" "" "$aln" "$nm2" "$wk1" "$wk2,$wk3,$wk4" "$qs2" "$fs1" "$gm1" "$gc1" "$gj1" "$gn1" "$gs1" "$gw1" "$mm1" "$mc1" "$mj1" "$mn1" "$ms1" "$mw1" ]
if { $exit_code } {
	remove_user "" "" "$us1,$us2,$us3,$us4"
	remove_acct "" "$nm1,$nm2,$nm3,$nm4"
	remove_qos "$qs1,$qs2,$qs3"
	remove_cluster "$tc1,$tc2,$tc3"
	exit $exit_code
}
	
exec $bin_rm -f $file_out4

set matches 0
set my_pid [spawn $sacctmgr -i dump $clu=$cl3 file=$file_out4]
expect {
	-re "(Cluster .* returned nothing)" {
	        send_user "FAILURE: there was a problem with the dump\n"
	    	incr exit_code 1
	}
	-re "(No filename given)" {
	        send_user "FAILURE: there was a problem with the file name\n"
	    	incr exit_code 1
	}
	-re "(Can only do one cluster at a time)" {
	        send_user "FAILURE: there was a problem with the dump\n"
	    	incr exit_code 1
	}
	-re "too few arguments for keyword" {
	        send_user "FAILURE: there was a problem with the dump request\n"
	    	incr exit_code 1
	}
	-re "Unknown option" {
	        send_user "FAILURE: there was a problem with the request\n"
	    	incr exit_code 1
	}
	-re "(sacctmgr: Cluster)" {
		incr matches
		exp_continue
	}
	timeout {
		send_user "\nFAILURE: sacctmgr list associations not responding\n"
		slow_kill $my_pid
		incr exit_code 1
	}
	eof {
		wait
	}
}

if {$matches != 1} {
	send_user "\nFAILURE:  File load 1 incorrect with only $matches.\n"
	incr exit_code 1
}

set matches 0
set tfile [open "$file_out4" r]
#while {[gets $tfile line] != -1} {
foreach line [split [read $tfile] "\n"] {
#
# Use echo to parse the dump file line by line.
#
#set matches 0
set my_pid [spawn echo "$line" ]
expect {
	-re "No such file or directory" {
	        send_user "FAILURE: there was a problem with the sacctmgr command\n"
	    	incr exit_code 1
	}
	-re "($clu - $cl3:$fs=$fs6:$gc=$gc6:$gj=$gj6:$gn=$gn6:$gs=$gs6:$mp=$mm6:$mu=$mc6:$mj=$mj6:$mnj=$mn6:$ms=$ms6:$md=$mw6:$qs='$qs2')" {
		send_user "\nmatch 1\n"
		incr matches
		exp_continue
	}

	-re "($par - $roo)" {
		send_user "\nmatch 2\n"
		incr matches
		exp_continue
	}

	-re "($acc - $nm4:$dsc='$ds4':$org='$or4':$fs=$fs5:$gm=$gm5:$gc=$gc5:$gj=$gj5:$gn=$gn5:$gs=$gs5:$gw=$gw5:$mp=$mm5:$mu=$mc5:$mj=$mj5:$mnj=$mn5:$ms=$ms5:$md=$mw5:$qs='$qs2')" {
		send_user "\nmatch 3\n"
		incr matches
		exp_continue
	}

	-re "($par - $nm4)" {
		send_user "\nmatch 4\n"
		incr matches
		exp_continue
	}

	-re "($usr - $us3:$dac='$nm3':$dw='$wk3':$al='$ala':$wk='$wk3,$wk1,$wk2,$wk4':$fs=$fs3:$gm=$gm3:$gc=$gc3:$gj=$gj3:$gn=$gn3:$gs=$gs3:$gw=$gw3:$mp=$mm3:$mu=$mc3:$mj=$mj3:$mnj=$mn3:$ms=$ms3:$md=$mw3:$qs='$qs2')" {
		send_user "\nmatch 5a\n"
		incr matches
		exp_continue
	}

	# Same as above, but without DefaultWCKey= or WCKeys=
	-re "($usr - $us3:$dac='$nm3':$al='$ala':$fs=$fs3:$gm=$gm3:$gc=$gc3:$gj=$gj3:$gn=$gn3:$gs=$gs3:$gw=$gw3:$mp=$mm3:$mu=$mc3:$mj=$mj3:$mnj=$mn3:$ms=$ms3:$md=$mw3:$qs='$qs2')" {
		send_user "\nmatch 5b\n"
		if {$track_wckey == 0} {
			incr matches
		} else {
			send_user "\nFAILURE: Missing DefaultWCKey or WCKeys\n"
		}
		exp_continue
	}

	-re "($acc - $nm3:$dsc='$ds3':$org='$or3':$fs=$fs4:$gm=$gm4:$gc=$gc4:$gj=$gj4:$gn=$gn4:$gs=$gs4:$gw=$gw4:$mp=$mm4:$mu=$mc4:$mj=$mj4:$mnj=$mn4:$ms=$ms4:$md=$mw4:$qs='$qs2')" {
		send_user "\nmatch 6\n"
		incr matches
		exp_continue
	}

	-re "($par - $nm3)" {
		send_user "\nmatch 7\n"
		incr matches
		exp_continue
	}

	-re "($acc - $nm2:$dsc='$ds2':$org='$or2':$fs=$fs3:$gm=$gm3:$gc=$gc3:$gj=$gj3:$gn=$gn3:$gs=$gs3:$gw=$gw3:$mp=$mm3:$mu=$mc3:$mj=$mj3:$mnj=$mn3:$ms=$ms3:$md=$mw3:$qs='$qs2')" {
		send_user "\nmatch 8\n"
		incr matches
		exp_continue
	}


	-re "($par - $nm2)" {
		send_user "\nmatch 9\n"
		incr matches
		exp_continue
	}

	-re "($usr - $us1:$dac='$nm2':$dw='$wk1':$wk='$wk3,$wk1,$wk2,$wk4':$fs=$fs1:$gm=$gm1:$gc=$gc1:$gj=$gj1:$gn=$gn1:$gs=$gs1:$gw=$gw1:$mp=$mm1:$mu=$mc1:$mj=$mj1:$mnj=$mn1:$ms=$ms1:$md=$mw1:$qs='$qs2')" {
		send_user "\nmatch 10a\n"
		incr matches
		exp_continue
	}

	# Same as above but without DefaultWCKey= or WCKeys=
	-re "($usr - $us1:$dac='$nm2':$fs=$fs1:$gm=$gm1:$gc=$gc1:$gj=$gj1:$gn=$gn1:$gs=$gs1:$gw=$gw1:$mp=$mm1:$mu=$mc1:$mj=$mj1:$mnj=$mn1:$ms=$ms1:$md=$mw1:$qs='$qs2')" {
		send_user "\nmatch 10b\n"
		if {$track_wckey == 0} {
			incr matches
		} else {
			send_user "\nFAILURE: Missing DefaultWCKey or WCKeys\n"
		}
		exp_continue
	}

	-re "($usr - $us2:$dac='$nm2':$dw='$wk2':$al='$alo':$wk='$wk3,$wk1,$wk2,$wk4':$fs=$fs2:$gm=$gm2:$gc=$gc2:$gj=$gj2:$gn=$gn2:$gs=$gs2:$gw=$gw2:$mp=$mm2:$mu=$mc2:$mj=$mj2:$mnj=$mn2:$ms=$ms2:$md=$mw2:$qs='$qs2')" {
		send_user "\nmatch 11a\n"
		incr matches
		exp_continue
	}

	# Same as above but without DefaultWCKey= or WCKeys=
	-re "($usr - $us2:$dac='$nm2':$al='$alo':$fs=$fs2:$gm=$gm2:$gc=$gc2:$gj=$gj2:$gn=$gn2:$gs=$gs2:$gw=$gw2:$mp=$mm2:$mu=$mc2:$mj=$mj2:$mnj=$mn2:$ms=$ms2:$md=$mw2:$qs='$qs2')" {
		send_user "\nmatch 11b\n"
		if {$track_wckey == 0} {
			incr matches
		} else {
			send_user "\nFAILURE: Missing DefaultWCKey or WCKeys\n"
		}
		exp_continue
	}

	timeout {
		send_user "\nFAILURE: sacctmgr list associations not responding\n"
		slow_kill $my_pid
		incr exit_code 1
	}
	eof {
		wait
	}
}
}
if {$matches != 14} {
	send_user "\nFAILURE:  Parse of file for 14 entries incorrect with only $matches.\n"
	incr exit_code 1
}

#
# This is the end below here

incr exit_code [remove_user "" "" "$us1,$us2,$us3,$us4"]
incr exit_code [remove_acct "" "$nm1,$nm2,$nm3,$nm4"]
incr exit_code [remove_qos "$qs1,$qs2,$qs3"]
incr exit_code [remove_cluster "$tc1,$tc2,$tc3"]

if {$exit_code == 0} {
   	exec $bin_rm -f $file_out4
	send_user "\nSUCCESS\n"
} else {
	send_user "\nFAILURE\n"
}
exit $exit_code

